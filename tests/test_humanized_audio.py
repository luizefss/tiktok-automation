#!/usr/bin/env python3
# Teste do Sistema de √Åudio Humanizado
import asyncio
import logging
import sys
import os
import json

# Adicionar path do backend
sys.path.append('/var/www/tiktok-automation/backend')

from services.gemini_tts_service import GeminiTTSService
from services.tts_service_enhanced import EnhancedTTSService

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_gemini_tts():
    """Testar Gemini TTS humanizado"""
    print("üî• TESTANDO GEMINI TTS HUMANIZADO")
    print("=" * 50)
    
    gemini_tts = GeminiTTSService()
    
    test_text = "Ol√° pessoal, este √© um teste da nossa nova voz humanizada. Cara, voc√™s n√£o v√£o acreditar como ficou natural agora!"
    
    try:
        result = await gemini_tts.generate_humanized_audio(
            text=test_text,
            voice_profile="male-professional",
            emotion="enthusiastic",
            pitch=0.0,
            speed=1.0,
            volume_gain=0.0,
            accent="pt-BR"
        )
        
        print(f"‚úÖ Resultado: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        if result.get('success'):
            audio_path = result.get('audio_path')
            if audio_path and os.path.exists(audio_path):
                file_size = os.path.getsize(audio_path)
                print(f"üìÅ Arquivo criado: {audio_path}")
                print(f"üìè Tamanho: {file_size} bytes")
                
                if file_size > 0:
                    print("‚úÖ SUCESSO: √Åudio gerado com conte√∫do!")
                    return True
                else:
                    print("‚ùå ERRO: Arquivo vazio (0kb)")
                    return False
            else:
                print("‚ùå ERRO: Arquivo n√£o foi criado")
                return False
        else:
            print(f"‚ùå ERRO: {result.get('error', 'Erro desconhecido')}")
            return False
            
    except Exception as e:
        print(f"‚ùå EXCE√á√ÉO: {str(e)}")
        return False

async def test_google_tts():
    """Testar Google Cloud TTS humanizado"""
    print("\nüé§ TESTANDO GOOGLE CLOUD TTS HUMANIZADO")
    print("=" * 50)
    
    google_tts = EnhancedTTSService()
    
    test_text = "Esta √© uma demonstra√ß√£o do Google Cloud TTS humanizado. A voz deve soar natural e com emo√ß√£o."
    
    try:
        result = await google_tts.generate_audio(
            text=test_text,
            voice_profile="male-professional",
            emotion="dramatic",
            pitch=0.0,
            speed=1.0,
            volume_gain=0.0,
            accent="pt-BR"
        )
        
        print(f"‚úÖ Resultado: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        if result.get('success'):
            audio_path = result.get('audio_path')
            if audio_path and os.path.exists(audio_path):
                file_size = os.path.getsize(audio_path)
                print(f"üìÅ Arquivo criado: {audio_path}")
                print(f"üìè Tamanho: {file_size} bytes")
                
                if file_size > 0:
                    print("‚úÖ SUCESSO: √Åudio Google TTS gerado com conte√∫do!")
                    return True
                else:
                    print("‚ùå ERRO: Arquivo Google TTS vazio (0kb)")
                    return False
            else:
                print("‚ùå ERRO: Arquivo Google TTS n√£o foi criado")
                return False
        else:
            print(f"‚ùå ERRO Google TTS: {result.get('error', 'Erro desconhecido')}")
            return False
            
    except Exception as e:
        print(f"‚ùå EXCE√á√ÉO Google TTS: {str(e)}")
        return False

async def main():
    print("üöÄ INICIANDO TESTES DE √ÅUDIO HUMANIZADO")
    print("=" * 60)
    
    # Testar Gemini TTS
    gemini_success = await test_gemini_tts()
    
    # Testar Google TTS
    google_success = await test_google_tts()
    
    # Resumo
    print("\nüìä RESUMO DOS TESTES")
    print("=" * 30)
    print(f"Gemini TTS: {'‚úÖ PASSOU' if gemini_success else '‚ùå FALHOU'}")
    print(f"Google TTS: {'‚úÖ PASSOU' if google_success else '‚ùå FALHOU'}")
    
    if gemini_success or google_success:
        print("\nüéâ PELO MENOS UM SISTEMA DE TTS FUNCIONANDO!")
        print("‚úÖ Sistema de √°udio humanizado est√° operacional")
    else:
        print("\n‚ö†Ô∏è NENHUM SISTEMA DE TTS FUNCIONANDO CORRETAMENTE")
        print("‚ùå Necess√°rio investigar problemas de configura√ß√£o")

if __name__ == "__main__":
    asyncio.run(main())