# /var/www/tiktok-automation/backend/services/prompt_optimizer.py

import re
import logging
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)


@dataclass
class VisualStyle:
    """Estilo visual com assinatura consistente"""
    name: str
    image_base: str
    motion_base: str
    description: str


@dataclass
class SceneConfig:
    """Configura√ß√£o de cena otimizada"""
    start_time: float
    end_time: float
    text: str
    intensity: str  # ALTA, M√âDIA, BAIXA
    image_prompt: str
    motion_prompt: str
    sfx_cue: str


class PromptOptimizer:
    def __init__(self):
        logger.info("üéØ Inicializando Prompt Optimizer...")

        # Estilos visuais h√≠bridos (DALL-E 3 + Imagen 3 compat√≠vel)
        self.visual_styles = {
            "historia_documentario": VisualStyle(
                name="Hist√≥ria/Document√°rio",
                image_base="interior de oficina renascentista vibrante, bancada de madeira com engrenagens douradas e molas brilhantes, luz dourada quente criando atmosfera acolhedora, ilumina√ß√£o cinematogr√°fica radiante, realismo pict√≥rico colorido, texturas ricas e vibrantes, paleta dourado/√¢mbar/laranja vivo, cores vivas e saturadas, formato vertical 9:16, sem texto, altamente detalhado, resolu√ß√£o 8K",
                motion_base="zoom cinematogr√°fico lento para dentro, zoom lento para fora, panor√¢mica suave esquerda/direita, inclina√ß√£o suave para cima/baixo, paralaxe sutil, transi√ß√µes luminosas",
                description="Estilo hist√≥rico vibrante com cores quentes e vivas"
            ),
            "tecnologia_moderna": VisualStyle(
                name="Tecnologia Moderna", 
                image_base="ambiente de laborat√≥rio futurista brilhante, displays hologr√°ficos coloridos e pain√©is LED vibrantes, superf√≠cies met√°licas com reflexos crom√°ticos, ilumina√ß√£o LED multicolorida, acentos neon v√≠vidos, design moderno fotorrealista cheio de vida, paleta azul el√©trico/ciano/magenta, cores tecnol√≥gicas vibrantes, formato vertical 9:16, sem texto, altamente detalhado, resolu√ß√£o 8K",
                motion_base="transi√ß√µes de zoom suaves, efeitos de paralaxe digital coloridos, movimentos de c√¢mera eletr√¥nicos luminosos, transi√ß√µes tech vibrantes",
                description="Estilo tecnol√≥gico futurista com cores vivas e energia"
            ),
            "misterio_suspense": VisualStyle(
                name="Mist√©rio/Suspense",
                image_base="cena atmosf√©rica intrigante, ambiente misterioso com ilumina√ß√£o dram√°tica colorida, efeitos de neblina dourada e silhuetas interessantes, ilumina√ß√£o cinematogr√°fica vibrante, fonte de luz colorida, estilo cinematogr√°fico moderno, paleta roxo profundo/azul royal/vermelho rico, cores intensas e envolventes, formato vertical 9:16, sem texto, altamente detalhado, resolu√ß√£o 8K",
                motion_base="movimentos de revela√ß√£o dram√°tica, transi√ß√µes coloridas suaves, ritmo de c√¢mera envolvente, efeitos de zoom cinematogr√°ficos",
                description="Estilo misterioso com atmosfera colorida e vibrante"
            )
        }

        # Movimentos por intensidade
        self.motion_by_intensity = {
            "ALTA": [
                "zoom cinematogr√°fico lento para dentro, paralaxe sutil, √™nfase dram√°tica",
                "revela√ß√£o din√¢mica inclinando para cima, movimento poderoso", 
                "aproxima√ß√£o em close-up, foco intenso"
            ],
            "M√âDIA": [
                "panor√¢mica suave da esquerda para direita, transi√ß√£o fluida",
                "revela√ß√£o com zoom lento para fora, movimento contextual",
                "mudan√ßa de paralaxe sutil, movimento equilibrado"
            ],
            "BAIXA": [
                "transi√ß√£o fade, efeito atmosf√©rico",
                "deriva suave, movimento m√≠nimo",
                "mudan√ßa de foco suave, movimento calmo"
            ]
        }

        # Palavras e tags negativas para todos os provedores  
        self.negative_common = (
            "sem texto, sem legendas, sem marcas d'√°gua, sem logos, sem marcas, "
            "sem interface, sem diagramas, sem gr√°ficos, sem bordas, sem molduras, sem adesivos"
        )

        # Qualidade negativa adicional (evitar problemas comuns) + EVITAR CORES ESCURAS
        self.negative_quality = (
            "borrado, baixa resolu√ß√£o, pixelizado, artefatos jpeg, granulado, fora do quadro, cortado, "
            "desfigurado, deformado, dedos extras, membros extras, assunto duplicado, anatomia ruim, "
            "preto, escuro, sombrio, g√≥tico, tenebroso, tons escuros, muito escuro, predominantemente preto"
        )

        # Diretrizes de composi√ß√£o e qualidade (em portugu√™s, foco em cores vivas)
        self.composition_common = (
            "regra dos ter√ßos, composi√ß√£o cinematogr√°fica, profundidade de campo rasa, bokeh natural, "
            "foco n√≠tido no assunto, materiais realistas, ilumina√ß√£o coerente, cores vibrantes e saturadas, "
            "paleta de cores rica, tonalidade viva, contraste colorido, brilho natural"
        )

        # Configura√ß√µes espec√≠ficas ultra-avan√ßadas por plataforma de IA
        self.ai_platform_configs = {
            "dalle": {
                "name": "DALL-E 3",
                "quality_tags": ["alto detalhamento", "fotorrealista", "grading cinematogr√°fico", "obra-prima da arte digital", "qualidade de arte conceitual"],
                "technical_specs": "1024x1792, vertical 9:16, ultra-detalhado, arte digital profissional",
                "style_modifiers": ["trending no ArtStation", "arte digital premiada", "ilustra√ß√£o profissional"],
                "limit": 1000,  # DALL-E tem limite menor
                "strengths": ["interpreta√ß√£o criativa", "estilo art√≠stico", "imagens conceituais"],
                "optimal_structure": "[assunto principal] + [estilo art√≠stico] + [humor/ilumina√ß√£o] + [especifica√ß√µes t√©cnicas]"
            },
            "imagen3": {
                "name": "Google Imagen 3",
                "quality_tags": ["fotorrealista", "resolu√ß√£o 8K", "fotografia profissional", "ultra-detalhado", "ilumina√ß√£o cinematogr√°fica"],
                "technical_specs": "1280x2048, propor√ß√£o vertical, qualidade fotogr√°fica, texturas realistas",
                "style_modifiers": ["fotografado com c√¢mera profissional", "fotografia premiada", "qualidade National Geographic"],
                "limit": 1600,
                "strengths": ["fotorrealismo", "ilumina√ß√£o natural", "detalhe arquitet√¥nico"],
                "optimal_structure": "[descri√ß√£o fotogr√°fica] + [detalhes c√¢mera/lente] + [ilumina√ß√£o] + [composi√ß√£o]"
            },
            "imagen4": {
                "name": "Google Imagen 4",
                "quality_tags": ["hiper-realista", "resolu√ß√£o 16K", "qualidade de museu", "perfei√ß√£o fotogr√°fica", "composi√ß√£o obra-prima"],
                "technical_specs": "1536x2048, resolu√ß√£o ultra-alta, detalhe m√°ximo, n√≠vel profissional",
                "style_modifiers": ["digno de galeria", "qualidade de exposi√ß√£o", "perfei√ß√£o t√©cnica", "maestria art√≠stica"],
                "limit": 1800,
                "strengths": ["realismo extremo", "detalhe perfeito", "composi√ß√£o art√≠stica"],
                "optimal_structure": "[cena detalhada] + [maestria art√≠stica] + [perfei√ß√£o t√©cnica] + [impacto emocional]"
            }
        }
        
        # Configura√ß√µes para anima√ß√£o de v√≠deo (3 segundos por imagem)
        self.video_animation_configs = {
            "leonardo": {
                "name": "Leonardo AI",
                "animation_styles": [
                    "panor√¢mica cinematogr√°fica lenta", "zoom dram√°tico", "rota√ß√£o suave",
                    "flutua√ß√£o suave", "revela√ß√£o √©pica", "movimento atmosf√©rico",
                    "efeito paralaxe", "dolly de c√¢mera", "movimento orbital"
                ],
                "duration_per_image": 3,  # 3 segundos fixos por imagem
                "duration_range": "3 segundos por cena, timing cinematogr√°fico",
                "technical_specs": "movimento suave, loop cont√≠nuo, renderiza√ß√£o alta qualidade, timing cinematogr√°fico",
                "movement_qualities": ["org√¢nico", "natural", "cinematogr√°fico", "profissional"],
                "strengths": ["transi√ß√µes suaves", "movimento art√≠stico", "qualidade cinematogr√°fica"],
                "optimal_structure": "[tipo movimento] + [comportamento c√¢mera] + [dura√ß√£o 3 segundos] + [especifica√ß√µes qualidade]"
            },
            "veo2": {
                "name": "Google Veo 2",
                "animation_styles": [
                    "movimentos complexos de c√¢mera", "transi√ß√µes din√¢micas de cena", "f√≠sica realista",
                    "movimento natural", "narrativa cinematogr√°fica", "perspectiva imersiva",
                    "anima√ß√£o multicamadas", "din√¢mica ambiental", "intera√ß√£o de personagens"
                ],
                "duration_per_image": 3,  # 3 segundos fixos por imagem
                "duration_range": "3 segundos por cena, timing narrativo estendido",
                "technical_specs": "qualidade 4K, desfoque de movimento natural, mudan√ßas realistas de ilumina√ß√£o, qualidade broadcast",
                "movement_qualities": ["realista", "complexo", "natural", "imersivo"],
                "strengths": ["f√≠sica realista", "cenas complexas", "timing otimizado"],
                "optimal_structure": "[din√¢mica da cena] + [movimento realista] + [detalhes ambientais] + [dura√ß√£o 3 segundos]"
            }
        }
        
        # Configura√ß√£o padr√£o do sistema: 3 segundos por imagem
        self.SECONDS_PER_IMAGE = 3

        # Ajustes por provedor (mantido para compatibilidade)
        self.provider_tweaks = {
            "openai": self.ai_platform_configs["dalle"],
            "dalle": self.ai_platform_configs["dalle"],
            "imagen": self.ai_platform_configs["imagen3"],
            "imagen3": self.ai_platform_configs["imagen3"],
            "imagen4": self.ai_platform_configs["imagen4"],
            "leonardo": {
                "quality": "highly detailed, sharp focus, intricate textures, cinematic grade",
                "limit": 1600
            },
            "hybrid": {
                "quality": "ultra detailed, photorealistic, cinematic lighting",
                "limit": 1500
            }
        }

        logger.info("‚úÖ Prompt Optimizer inicializado - 3 segundos por imagem configurado")

    def calculate_number_of_prompts(self, target_duration_seconds: int) -> int:
        """Calcula automaticamente quantos prompts s√£o necess√°rios baseado na dura√ß√£o desejada"""
        # Para v√≠deos de 1 minuto (60s), sempre gerar 20 prompts
        if target_duration_seconds >= 60:
            num_prompts = 20
        else:
            num_prompts = max(1, target_duration_seconds // self.SECONDS_PER_IMAGE)
        
        logger.info(f"üìä Para {target_duration_seconds}s de v√≠deo: {num_prompts} prompts (3s cada)")
        return num_prompts

    def calculate_video_duration(self, number_of_prompts: int) -> int:
        """Calcula a dura√ß√£o total do v√≠deo baseado no n√∫mero de prompts"""
        total_duration = number_of_prompts * self.SECONDS_PER_IMAGE
        logger.info(f"üìä Com {number_of_prompts} prompts: {total_duration}s de v√≠deo total")
        return total_duration

    def generate_20_prompts_for_60s_video(self, theme: str, style: str = "historia_documentario") -> List[str]:
        """Gera exatamente 20 prompts otimizados para v√≠deo de 60 segundos (3s cada)"""
        logger.info(f"üéØ Gerando 20 prompts para v√≠deo de 60s sobre: {theme}")
        
        style_config = self.visual_styles.get(style, self.visual_styles["historia_documentario"])
        prompts = []
        
        # Prompts base variados para criar diversidade visual
        base_variations = [
            "cena de abertura cinematogr√°fica",
            "foco em detalhes importantes", 
            "panor√¢mica do ambiente",
            "close-up dram√°tico",
            "perspectiva ampla",
            "momento de tens√£o",
            "revela√ß√£o visual",
            "transi√ß√£o suave",
            "√¢ngulo √∫nico",
            "destaque principal",
            "atmosfera envolvente",
            "movimento din√¢mico",
            "foco narrativo",
            "elemento surpresa",
            "culmina√ß√£o visual",
            "contraste dram√°tico",
            "profundidade de campo",
            "ilumina√ß√£o especial",
            "momento clim√°tico",
            "finaliza√ß√£o √©pica"
        ]
        
        for i in range(20):
            # Usar varia√ß√£o base ciclicamente
            variation = base_variations[i % len(base_variations)]
            
            # Criar prompt espec√≠fico combinando tema, varia√ß√£o e estilo
            prompt_description = f"{theme}, {variation}, {style_config.image_base}"
            
            # Otimizar o prompt
            optimized_prompt = self.optimize_image_prompt(
                prompt_description, 
                style=style, 
                provider="hybrid",
                context={"sequence": i+1, "total": 20}
            )
            
            prompts.append(optimized_prompt)
            logger.debug(f"üìù Prompt {i+1}/20: {optimized_prompt[:100]}...")
        
        logger.info(f"‚úÖ Gerados 20 prompts para v√≠deo de 60s - Total: {len(prompts)} prompts")
        return prompts

    def create_hybrid_prompt(self, description: str, visual_details: str = "", lighting: str = "", style: str = "historia_documentario") -> str:
        """Cria prompt h√≠brido seguindo estrutura: [descri√ß√£o] + [detalhes] + [ilumina√ß√£o] + [tags t√©cnicas]"""
        try:
            style_config = self.visual_styles.get(
                style, self.visual_styles["historia_documentario"])

            # Componentes do prompt h√≠brido
            components = []

            # 1. Descri√ß√£o principal (limpa)
            if description.strip():
                cleaned_desc = self.clean_prompt_noise(description)
                components.append(cleaned_desc)

            # 2. Detalhes visuais espec√≠ficos
            if visual_details.strip():
                components.append(visual_details)

            # 3. Condi√ß√µes de ilumina√ß√£o
            if lighting.strip():
                components.append(lighting)
            else:
                # Usar ilumina√ß√£o padr√£o do estilo
                if style == "historia_documentario":
                    components.append(
                        "warm candlelight casting dramatic shadows, cinematic lighting")
                elif style == "tecnologia_moderna":
                    components.append(
                        "cool blue LED lighting, neon accents, digital glow effects")
                elif style == "misterio_suspense":
                    components.append(
                        "dim moody lighting, single light source, dramatic contrasts")

            # 4. Estilo art√≠stico e tags t√©cnicas (sempre incluir)
            artistic_style = ""
            if style == "historia_documentario":
                artistic_style = "painterly realistic, ultra realistic, rich textures, dark teal/orange palette"
            elif style == "tecnologia_moderna":
                artistic_style = "photorealistic, ultra modern, sleek design, blue/cyan palette"
            elif style == "misterio_suspense":
                artistic_style = "cinematic noir, atmospheric realism, high contrast, monochromatic with red accents"

            components.append(artistic_style)
            components.append(
                "vertical 9:16, no text, highly detailed, 8K resolution")

            # Unir componentes
            hybrid_prompt = ", ".join(filter(None, components))

            logger.info(f"üéØ Prompt h√≠brido criado: {hybrid_prompt[:100]}...")
            return hybrid_prompt

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar prompt h√≠brido: {e}")
            return description

    def optimize_image_prompt(self, raw_prompt: str, style: str = "historia_documentario", provider: str = "hybrid", context: Optional[Dict[str, Any]] = None) -> str:
        """Otimiza prompt de imagem para compatibilidade DALL-E 3 + Imagen 3 + Leonardo.
        Mant√©m compatibilidade com a assinatura antiga. Usa provider para pequenos ajustes.
        """
        try:
            # Limpar ru√≠do do prompt
            cleaned = self.clean_prompt_noise(raw_prompt)

            # Aplicar estilo visual h√≠brido
            style_config = self.visual_styles.get(
                style, self.visual_styles["historia_documentario"])

            # Estrutura h√≠brida: [descri√ß√£o principal] + [base style completa]
            if cleaned.strip():
                # Se h√° conte√∫do espec√≠fico, combinar com estilo
                optimized = f"{cleaned}, {style_config.image_base}"
            else:
                # Se n√£o h√° conte√∫do espec√≠fico, usar apenas o estilo base
                optimized = style_config.image_base

            # Composi√ß√£o e negativos
            if self.negative_common not in optimized:
                optimized += f", {self.negative_common}"
            if self.negative_quality not in optimized:
                optimized += f", {self.negative_quality}"
            if self.composition_common not in optimized:
                optimized += f", {self.composition_common}"

            # Assegurar 9:16
            if "9:16" not in optimized:
                optimized += ", vertical 9:16"

            # Ajustes por provedor
            prov = (provider or "hybrid").lower()
            if prov == 'dalle':
                prov = 'openai'
            tweaks = self.provider_tweaks.get(
                prov, self.provider_tweaks["hybrid"])
            if tweaks["quality"] not in optimized:
                optimized += f", {tweaks['quality']}"

            # Consist√™ncia opcional por contexto (personagens/objetos)
            if context and isinstance(context, dict):
                entity = context.get("entity") or context.get("character")
                if entity:
                    optimized += f", consistent depiction of {entity} across scenes"
                era = context.get("era") or context.get("period")
                if era:
                    optimized += f", set in {era}"
                framing = context.get("framing")
                if framing and framing not in optimized:
                    optimized += f", {framing}"
                lens = context.get("lens")
                if lens and lens not in optimized:
                    optimized += f", shot on {lens} lens"

            # Limitar comprimento se necess√°rio (DALL¬∑E tende a aceitar prompts menores)
            max_len = int(tweaks.get("limit", 1500))
            if len(optimized) > max_len:
                optimized = optimized[:max_len]

            logger.info(f"üé® Prompt h√≠brido gerado: {optimized[:100]}...")
            return optimized

        except Exception as e:
            logger.error(f"‚ùå Erro ao otimizar prompt de imagem: {e}")
            return raw_prompt

    def optimize_motion_prompt(self, scene_content: str, intensity: str = "M√âDIA", style: str = "historia_documentario", duration_seconds: Optional[float] = None) -> str:
        """Otimiza prompt de movimento baseado na intensidade e contexto"""
        try:
            # Selecionar movimento apropriado
            motion_options = self.motion_by_intensity.get(
                intensity, self.motion_by_intensity["M√âDIA"])

            # Para simplicidade, usa o primeiro movimento da intensidade
            # Em uma vers√£o mais avan√ßada, poderia analisar o contexto da cena
            base_motion = motion_options[0]

            # Aplicar estilo de movimento
            style_config = self.visual_styles.get(
                style, self.visual_styles["historia_documentario"])

            # Incluir movimento de c√¢mera e dura√ß√£o t√≠pica do clipe animado
            dur_txt = f"{int(duration_seconds)} seconds" if duration_seconds and duration_seconds > 0 else "4-8 seconds"
            camera = "cinematic camera move, parallax layers"
            optimized = f"{base_motion}, {style_config.motion_base}, {camera}, {dur_txt}, 9:16 vertical"

            logger.info(f"üé¨ Movimento otimizado: {optimized}")
            return optimized

        except Exception as e:
            logger.error(f"‚ùå Erro ao otimizar prompt de movimento: {e}")
            return "slow cinematic movement, 6 seconds, 9:16 vertical"

    def clean_prompt_noise(self, prompt: str) -> str:
        """Remove ru√≠do e fragmentos desnecess√°rios do prompt"""
        try:
            # Remover pontua√ß√£o problem√°tica
            cleaned = re.sub(r'[?!,]{2,}', '', prompt)

            # Remover palavras fragmentadas (muito curtas isoladas)
            words = prompt.split()
            filtered_words = []

            for i, word in enumerate(words):
                # Manter palavra se:
                # - Tem mais de 2 caracteres OU
                # - √â uma preposi√ß√£o comum OU
                # - Est√° no contexto correto
                word_clean = re.sub(r'[^\w]', '', word)

                if (len(word_clean) > 2 or
                    word_clean.lower() in ['da', 'de', 'do', 'na', 'no', 'em', 'um', 'uma'] or
                        (i > 0 and i < len(words)-1)):  # palavra no meio da frase
                    filtered_words.append(word)

            cleaned = ' '.join(filtered_words)

            # Limpar espa√ßos m√∫ltiplos
            cleaned = re.sub(r'\s+', ' ', cleaned).strip()

            logger.debug(f"üßπ Prompt limpo: '{prompt}' ‚Üí '{cleaned}'")
            return cleaned

        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar prompt: {e}")
            return prompt

    def analyze_script_intensity(self, text: str) -> str:
        """Analisa o texto para determinar intensidade dram√°tica"""
        try:
            # Palavras que indicam alta intensidade
            high_intensity_words = [
                'imagine', 'incr√≠vel', 'surpreendente', 'impacto', 'revolu√ß√£o',
                'dram√°tico', 'impressionante', 'extraordin√°rio', 'fascinante'
            ]

            # Palavras que indicam m√©dia intensidade
            medium_intensity_words = [
                'durante', 'contexto', 'hist√≥ria', 'desenvolvimento', 'evolu√ß√£o',
                'processo', 'm√©todo', 't√©cnica', 'sistema'
            ]

            text_lower = text.lower()

            high_count = sum(
                1 for word in high_intensity_words if word in text_lower)
            medium_count = sum(
                1 for word in medium_intensity_words if word in text_lower)

            if high_count >= 2:
                return "ALTA"
            elif medium_count >= 2:
                return "M√âDIA"
            else:
                return "BAIXA"

        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar intensidade: {e}")
            return "M√âDIA"

    def create_optimized_scenes(self, script: str, image_prompts: List[str],
                                duration: float = 60.0, style: str = "historia_documentario", provider: str = "hybrid") -> List[SceneConfig]:
        """Cria cenas otimizadas com base no script e prompts"""
        try:
            # Dividir script em frases
            sentences = [s.strip() for s in script.split('.') if s.strip()]

            # Calcular dura√ß√£o por cena
            num_scenes = min(len(sentences), len(image_prompts))
            if num_scenes == 0:
                logger.warning(
                    "‚ö†Ô∏è Nenhuma cena para otimizar: script ou prompts vazios")
                return []
            duration_per_scene = duration / num_scenes

            scenes = []

            # Varia√ß√µes determin√≠sticas por cena para evitar prompts id√™nticos
            angle_variants = [
                "low-angle shot",
                "high-angle shot",
                "over-the-shoulder",
                "top-down view",
                "dutch angle",
                "wide establishing shot",
                "medium shot",
                "close-up shot"
            ]
            time_of_day_variants = [
                "golden hour",
                "blue hour",
                "night scene with practical lights",
                "midday sunlight",
                "overcast soft light"
            ]
            lens_variants = [
                "24mm wide lens",
                "35mm lens",
                "50mm lens",
                "85mm portrait lens"
            ]

            for i in range(num_scenes):
                # Calcular timing
                start_time = i * duration_per_scene
                end_time = (i + 1) * duration_per_scene

                # Analisar intensidade da frase
                sentence = sentences[i] if i < len(sentences) else ""
                intensity = self.analyze_script_intensity(sentence)

                # Otimizar prompts usando estrutura h√≠brida
                raw_image_prompt = image_prompts[i] if i < len(image_prompts) else "historical scene"

                # Se o prompt for muito gen√©rico (ex.: "scene", "scene 1"), use trecho da frase para diversificar
                generic_pattern = re.compile(r"^\s*scene(\s+\d+)?\s*$", re.IGNORECASE)
                if (not raw_image_prompt) or len(raw_image_prompt.strip()) < 6 or generic_pattern.match(raw_image_prompt.strip()):
                    # usar at√© 12 palavras significativas da senten√ßa como base
                    words = [w for w in re.split(r"\s+", sentence) if w]
                    base_desc = " ".join(words[:12]) if words else "cinematic historical scene"
                    raw_image_prompt = base_desc

                # Contexto simples para consist√™ncia entre cenas (entidade principal)
                context = {"entity": None}
                words = [w.strip(',;:') for w in sentence.split()]
                for w in words:
                    if len(w) > 3:
                        context["entity"] = w
                        break

                # Framing por intensidade
                framing_map = {
                    "ALTA": "dramatic close-up, subject fills the frame",
                    "M√âDIA": "medium shot, subject waist-up",
                    "BAIXA": "wide shot, establishing view"
                }
                framing = framing_map.get(intensity, "medium shot")
                context["framing"] = framing

                # Usar otimizador ciente de provedor
                optimized_image = self.optimize_image_prompt(
                    raw_prompt=raw_image_prompt,
                    style=style,
                    provider=provider,
                    context=context
                )

                # Injetar varia√ß√µes determin√≠sticas por cena para evitar repeti√ß√£o
                angle = angle_variants[i % len(angle_variants)]
                tod = time_of_day_variants[i % len(time_of_day_variants)]
                lens = lens_variants[i % len(lens_variants)]

                for variant in (angle, tod, lens):
                    if variant not in optimized_image:
                        optimized_image += f", {variant}"

                optimized_motion = self.optimize_motion_prompt(
                    sentence, intensity, style)

                # Criar configura√ß√£o da cena
                scene = SceneConfig(
                    start_time=start_time,
                    end_time=end_time,
                    text=sentence,
                    intensity=intensity,
                    image_prompt=optimized_image,
                    motion_prompt=optimized_motion,
                    sfx_cue=self.suggest_sfx(sentence, intensity)
                )

                scenes.append(scene)

            logger.info(f"‚úÖ {len(scenes)} cenas otimizadas criadas")
            return scenes

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar cenas otimizadas: {e}")
            return []

    def suggest_sfx(self, text: str, intensity: str) -> str:
        """Sugere efeitos sonoros baseados no texto e intensidade"""
        text_lower = text.lower()

        if any(word in text_lower for word in ['papel', 'esbo√ßo', 'desenho']):
            return "paper rustling, quill writing"
        elif any(word in text_lower for word in ['m√°quina', 'engrenagem', 'mec√¢nico']):
            return "mechanical clicks, gear sounds"
        elif any(word in text_lower for word in ['batalha', 'guerra', 'lan√ßar']):
            return "tension sounds, wood creaking"
        elif intensity == "ALTA":
            return "dramatic crescendo, emphasis sound"
        else:
            return "ambient atmosphere, subtle background"

    def create_leonardo_style_prompt(self, scene_description: str, scene_type: str = "workshop", style: str = "historia_documentario") -> str:
        """Cria prompts no estilo do exemplo da catapulta de Leonardo"""
        try:
            # Templates baseados no seu exemplo
            leonardo_templates = {
                "workshop": "renaissance workshop interior, wooden bench with gears and springs, candlelight casting dramatic shadows, cinematic lighting, painterly realistic, subtle dust in air, vertical 9:16, no text, highly detailed, 8K resolution",
                "sketch": "cutaway illustration of renaissance mechanical concept with torsion springs and gear train, parchment paper, sepia ink, cinematic rim light, painterly realistic, vertical 9:16, no text, highly detailed, 8K resolution",
                "demonstration": "dramatic side view of reconstructed da Vinci mechanism in courtyard, wooden frame, coiled springs visible, evening light with long shadows, cinematic, painterly realistic, vertical 9:16, no text, highly detailed, 8K resolution",
                "comparison": "split composition: medieval mechanisms vs da Vinci elastic-spring design foreground, moody sky, cinematic lighting, painterly realistic, vertical 9:16, no text, highly detailed, 8K resolution",
                "vision": "montage: renaissance sketches morphing into modern engineering lab, gears becoming CAD blueprints on light table, cool cinematic glow, painterly-realistic blend, vertical 9:16, no text, highly detailed, 8K resolution",
                "portrait": "portrait-like scene of Leonardo observing his mechanical models, warm candlelight, reflective eyes, depth of field on wooden mechanisms, painterly realistic, vertical 9:16, no text, highly detailed, 8K resolution",
                "hero": "hero shot of da Vinci sketch overlaying dark background with subtle rainbow oil sheen, elegant composition, cinematic rim light, painterly realistic, vertical 9:16, no text, highly detailed, 8K resolution"
            }

            # Selecionar template mais apropriado
            template = leonardo_templates.get(
                scene_type, leonardo_templates["workshop"])

            # Se h√° descri√ß√£o espec√≠fica, integrar com template
            if scene_description.strip():
                # Extrair conceito principal da descri√ß√£o
                cleaned_desc = self.clean_prompt_noise(scene_description)

                # Combinar descri√ß√£o com estrutura t√©cnica
                if "workshop" in cleaned_desc.lower() or "bancada" in cleaned_desc.lower():
                    return leonardo_templates["workshop"]
                elif "esbo√ßo" in cleaned_desc.lower() or "desenho" in cleaned_desc.lower():
                    return leonardo_templates["sketch"]
                elif "demonstra" in cleaned_desc.lower() or "a√ß√£o" in cleaned_desc.lower():
                    return leonardo_templates["demonstration"]
                elif "compara" in cleaned_desc.lower() or "versus" in cleaned_desc.lower():
                    return leonardo_templates["comparison"]
                elif "futuro" in cleaned_desc.lower() or "moderno" in cleaned_desc.lower():
                    return leonardo_templates["vision"]
                elif "leonardo" in cleaned_desc.lower() or "retrato" in cleaned_desc.lower():
                    return leonardo_templates["portrait"]
                else:
                    return template

            return template

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar prompt estilo Leonardo: {e}")
            return self.create_hybrid_prompt(scene_description, style=style)

    def generate_ultra_detailed_image_prompts(self, theme: str, script_data: Dict[str, Any]) -> Dict[str, str]:
        """Gera prompts ultra-detalhados e espec√≠ficos para cada plataforma de IA"""
        try:
            # Detectar categoria do tema
            category = self._detect_content_category(theme, script_data)
            
            # Extrair elementos visuais do script
            visual_elements = self._extract_visual_keywords(script_data, theme)
            
            # Gerar prompts espec√≠ficos para cada plataforma
            prompts = {}
            
            # DALL-E 3 - Foco em arte conceitual e criatividade
            prompts["dalle"] = self._create_dalle3_prompt(theme, category, visual_elements)
            
            # Imagen 3 - Foco em fotorealismo
            prompts["imagen3"] = self._create_imagen3_prompt(theme, category, visual_elements)
            
            # Imagen 4 - M√°xima qualidade e detalhamento
            prompts["imagen4"] = self._create_imagen4_prompt(theme, category, visual_elements)
            
            logger.info(f"‚úÖ Prompts ultra-detalhados gerados para tema: {theme}")
            return prompts
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar prompts ultra-detalhados: {e}")
            return {}

    def generate_video_animation_prompts(self, theme: str, script_data: Dict[str, Any], image_prompts: Dict[str, str] = None) -> Dict[str, str]:
        """Gera prompts ultra-detalhados para anima√ß√£o de v√≠deo"""
        try:
            category = self._detect_content_category(theme, script_data)
            narrative_flow = self._analyze_narrative_flow(script_data)
            
            prompts = {}
            
            # Leonardo AI - Movimento art√≠stico e cinematogr√°fico
            prompts["leonardo"] = self._create_leonardo_animation_prompt(theme, category, narrative_flow)
            
            # Veo 2 - Realismo e complexidade m√°xima
            prompts["veo2"] = self._create_veo2_animation_prompt(theme, category, narrative_flow)
            
            logger.info(f"‚úÖ Prompts de anima√ß√£o gerados para tema: {theme}")
            return prompts
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar prompts de anima√ß√£o: {e}")
            return {}

    def _detect_content_category(self, theme: str, script_data: Dict[str, Any]) -> str:
        """Detecta categoria do conte√∫do para otimiza√ß√£o de prompts"""
        theme_lower = theme.lower()
        script_text = str(script_data.get("roteiro_completo", "")).lower()
        combined_text = f"{theme_lower} {script_text}"
        
        category_keywords = {
            "historia": ["hist√≥ria", "historia", "antigo", "medieval", "guerra", "civiliza√ß√£o", "descoberta", "inventor"],
            "ciencia": ["ci√™ncia", "cient√≠fico", "pesquisa", "experimento", "dna", "tecnologia", "descoberta"],
            "misterio": ["mist√©rio", "enigma", "segredo", "paranormal", "inexplic√°vel", "conspira√ß√£o"],
            "tecnologia": ["tecnologia", "digital", "futuro", "intelig√™ncia artificial", "inova√ß√£o", "rob√¥"],
            "motivacional": ["motiva√ß√£o", "sucesso", "supera√ß√£o", "conquista", "inspira√ß√£o", "crescimento"],
            "curiosidade": ["curiosidade", "fato", "incr√≠vel", "surpreendente", "descoberta", "interessante"]
        }
        
        category_scores = {}
        for category, keywords in category_keywords.items():
            score = sum(1 for keyword in keywords if keyword in combined_text)
            category_scores[category] = score
        
        if category_scores:
            best_category = max(category_scores, key=category_scores.get)
            if category_scores[best_category] > 0:
                return best_category
                
        return "curiosidade"

    def _extract_visual_keywords(self, script_data: Dict[str, Any], theme: str) -> List[str]:
        """Extrai palavras-chave visuais para incorporar nos prompts"""
        elements = []
        
        # Do script
        script_text = script_data.get("roteiro_completo", "")
        
        # Buscar elementos visuais espec√≠ficos
        visual_patterns = [
            r'\b([A-Z][a-z√°√™√ß√µ√£]+(?:\s+[A-Z][a-z√°√™√ß√µ√£]+)*)\b',  # Nomes pr√≥prios
            r'\b(castelo|pal√°cio|laborat√≥rio|floresta|oceano|montanha|cidade|igreja|pr√©dio)\b',
            r'\b(dourado|prateado|vermelho|azul|verde|negro|branco|colorido)\b',
            r'\b(antigo|moderno|futurista|medieval|cl√°ssico|contempor√¢neo)\b',
            r'\b(m√°quina|ferramenta|instrumento|aparelho|dispositivo)\b'
        ]
        
        for pattern in visual_patterns:
            matches = re.findall(pattern, script_text.lower())
            elements.extend([match for match in matches if len(match) > 2])
        
        # Do tema
        theme_words = [word for word in theme.split() if len(word) > 3]
        elements.extend(theme_words)
        
        return list(set(elements))[:15]

    def _create_dalle3_prompt(self, theme: str, category: str, elements: List[str]) -> str:
        """Cria prompt espec√≠fico otimizado para DALL-E 3"""
        config = self.ai_platform_configs["dalle"]
        
        # Estrutura base do tema
        base_description = f"Create a stunning vertical digital artwork about {theme}"
        
        # Adicionar elementos visuais espec√≠ficos
        if elements:
            visual_desc = f", featuring {', '.join(elements[:5])}"
            base_description += visual_desc
        
        # Estilo art√≠stico por categoria
        artistic_styles = {
            "historia": "renaissance painting style, historical accuracy, warm golden tones",
            "ciencia": "scientific illustration, technical precision, clean modern aesthetic",  
            "misterio": "dark atmospheric art, mysterious shadows, dramatic lighting",
            "tecnologia": "futuristic concept art, digital aesthetic, neon highlights",
            "motivacional": "inspirational poster art, bright uplifting colors, heroic composition",
            "curiosidade": "educational illustration, engaging visuals, clear presentation"
        }
        
        artistic_style = artistic_styles.get(category, artistic_styles["curiosidade"])
        
        # Composi√ß√£o e qualidade
        composition = "vertical 9:16 composition, perfect for mobile viewing, eye-catching design"
        quality_tags = ", ".join(config["quality_tags"][:3])
        style_modifiers = ", ".join(config["style_modifiers"][:2])
        
        prompt = f"""{base_description}

ARTISTIC STYLE: {artistic_style}, concept art masterpiece
COMPOSITION: {composition}, rule of thirds, dramatic focal point
TECHNICAL: {config["technical_specs"]}, {quality_tags}
QUALITY: {style_modifiers}, scroll-stopping imagery
MOOD: Engaging and captivating, perfect for YouTube Shorts"""

        return self._optimize_prompt_length(prompt, config["limit"])

    def _create_imagen3_prompt(self, theme: str, category: str, elements: List[str]) -> str:
        """Cria prompt fotorealista otimizado para Imagen 3"""
        config = self.ai_platform_configs["imagen3"]
        
        # Descri√ß√£o fotogr√°fica
        base_description = f"Professional vertical photograph showcasing {theme}"
        
        if elements:
            visual_desc = f", capturing {', '.join(elements[:4])} with photographic precision"
            base_description += visual_desc
        
        # Especifica√ß√µes fotogr√°ficas por categoria
        photo_specs = {
            "historia": "shot with vintage large format camera, warm natural lighting, documentary photography style",
            "ciencia": "macro photography, clinical lighting, high-resolution scientific documentation",
            "misterio": "atmospheric photography, dramatic shadows, film noir aesthetic",
            "tecnologia": "modern digital photography, LED lighting, futuristic composition",
            "motivacional": "portrait photography, golden hour lighting, inspiring composition",
            "curiosidade": "detailed close-up photography, perfect lighting, educational clarity"
        }
        
        photo_style = photo_specs.get(category, photo_specs["curiosidade"])
        
        # Especifica√ß√µes t√©cnicas
        camera_settings = "shot with professional DSLR, 85mm lens, perfect exposure and focus"
        quality_tags = ", ".join(config["quality_tags"][:3])
        
        prompt = f"""{base_description}

PHOTOGRAPHY: {photo_style}, {camera_settings}
COMPOSITION: {config["technical_specs"]}, professional framing
QUALITY: {quality_tags}, museum-quality photography
LIGHTING: Natural photographic lighting, professionally lit
PURPOSE: Optimized for YouTube Shorts, maximum visual impact"""

        return self._optimize_prompt_length(prompt, config["limit"])

    def _create_imagen4_prompt(self, theme: str, category: str, elements: List[str]) -> str:
        """Cria prompt de m√°xima qualidade para Imagen 4"""
        config = self.ai_platform_configs["imagen4"]
        
        # Descri√ß√£o de obra-prima
        base_description = f"Hyperrealistic masterpiece depicting {theme} with unprecedented detail"
        
        if elements:
            visual_desc = f", showcasing {', '.join(elements[:6])} in perfect artistic harmony"
            base_description += visual_desc
        
        # Especifica√ß√µes art√≠sticas supremas por categoria
        masterpiece_specs = {
            "historia": "museum-quality historical recreation, period-perfect accuracy, masterful craftsmanship",
            "ciencia": "scientific visualization perfection, technical accuracy, educational excellence",
            "misterio": "atmospheric masterpiece, psychological depth, cinematic perfection",
            "tecnologia": "futuristic visualization excellence, cutting-edge aesthetics, innovative composition",
            "motivacional": "inspirational art mastery, emotional resonance, uplifting perfection",
            "curiosidade": "educational art excellence, perfect clarity, engaging presentation"
        }
        
        artistic_mastery = masterpiece_specs.get(category, masterpiece_specs["curiosidade"])
        
        # Qualidade suprema
        technical_perfection = config["technical_specs"]
        quality_tags = ", ".join(config["quality_tags"])
        style_modifiers = ", ".join(config["style_modifiers"][:3])
        
        prompt = f"""{base_description}

ARTISTIC MASTERY: {artistic_mastery}, {style_modifiers}
TECHNICAL SUPREMACY: {technical_perfection}, flawless execution
VISUAL IMPACT: {quality_tags}, breathtaking composition
EMOTIONAL DEPTH: Profound visual storytelling, memorable imagery
PLATFORM OPTIMIZATION: Perfect for YouTube Shorts, viral potential"""

        return self._optimize_prompt_length(prompt, config["limit"])

    def _create_leonardo_animation_prompt(self, theme: str, category: str, narrative_flow: str) -> str:
        """Cria prompt cinematogr√°fico para Leonardo AI"""
        config = self.video_animation_configs["leonardo"]
        
        # Movimento base por categoria
        movement_styles = {
            "historia": "slow cinematic pan revealing historical details, atmospheric movement",
            "ciencia": "smooth zoom into scientific details, methodical camera movement", 
            "misterio": "suspenseful reveal with dramatic camera work, mysterious movement",
            "tecnologia": "futuristic camera transitions, sleek digital movement",
            "motivacional": "uplifting camera movements, inspiring reveal sequences",
            "curiosidade": "engaging exploratory movement, discovery-focused camera work"
        }
        
        base_movement = movement_styles.get(category, movement_styles["curiosidade"])
        
        # Fluxo narrativo espec√≠fico
        narrative_movements = {
            "revelation": "dramatic reveal sequence with building tension",
            "action": "dynamic movement with energy and momentum",
            "mystery": "slow atmospheric movement with subtle reveals",
            "transformation": "smooth morphing transitions",
            "exploration": "curious exploratory camera movement"
        }
        
        specific_movement = narrative_movements.get(narrative_flow, "smooth cinematic movement")
        
        prompt = f"""Create cinematic animation for {theme}:

MOVEMENT STYLE: {base_movement}, {specific_movement}
CAMERA WORK: {config["technical_specs"]}, professional cinematography
DURATION: {config["duration_range"]}, perfectly timed for YouTube Shorts
VISUAL QUALITY: Cinematic excellence, {", ".join(config["movement_qualities"])}
COMPOSITION: Vertical 9:16 format, mobile-optimized framing
STORYTELLING: Visual narrative enhancement, engaging animation
TECHNICAL: Seamless loop capability, broadcast quality output"""

        return prompt.strip()

    def _create_veo2_animation_prompt(self, theme: str, category: str, narrative_flow: str) -> str:
        """Cria prompt realista complexo para Veo 2"""
        config = self.video_animation_configs["veo2"]
        
        # Din√¢mica de cena por categoria
        scene_dynamics = {
            "historia": "detalhes ambientais historicamente precisos, f√≠sica e ilumina√ß√£o adequadas ao per√≠odo",
            "ciencia": "movimento cientificamente preciso, comportamento realista de materiais, din√¢micas de laborat√≥rio",
            "misterio": "mudan√ßas ambientais atmosf√©ricas, mudan√ßas sutis de ilumina√ß√£o, ambiente misterioso",
            "tecnologia": "intera√ß√£o ambiental futur√≠stica, efeitos visuais high-tech, elementos digitais",
            "motivacional": "din√¢mica ambiental inspiradora, atmosfera elevadora, energia motivacional",
            "curiosidade": "narrativa ambiental detalhada, progress√£o visual educativa"
        }
        
        scene_detail = scene_dynamics.get(category, scene_dynamics["curiosidade"])
        
        # Complexidade por fluxo narrativo
        narrative_complexity = {
            "revelation": "revela√ß√£o multicamadas com narrativa ambiental complexa",
            "action": "din√¢mica de alta energia com simula√ß√£o de f√≠sica realista",
            "mystery": "progress√£o atmosf√©rica com mudan√ßas de humor ambiental",
            "transformation": "morfismo sofisticado com f√≠sica de transforma√ß√£o natural",
            "exploration": "descoberta ambiental imersiva com intera√ß√£o natural"
        }
        
        complexity_level = narrative_complexity.get(narrative_flow, "progress√£o ambiental natural")
        
        prompt = f"""Gere anima√ß√£o de v√≠deo premium realista para {theme}:

DIN√ÇMICA DA CENA: {complexity_level}, {scene_detail}
REALISMO: {config["technical_specs"]}, simula√ß√£o de f√≠sica natural
DURA√á√ÉO: {config["duration_range"]}, capacidade narrativa estendida
COMPLEXIDADE: {", ".join(config["movement_qualities"])}, anima√ß√£o sofisticada
CINEMATOGRAFIA: trabalho de c√¢mera de qualidade cinematogr√°fica profissional, padr√µes broadcast
PROPOR√á√ÉO: formato vertical 9:16, especifica√ß√£o YouTube Shorts
AMBIENTAL: mudan√ßas realistas de ilumina√ß√£o, profundidade atmosf√©rica, movimento natural
ENGAJAMENTO: reten√ß√£o m√°xima do visualizador, qualidade otimizada para redes sociais"""

        return prompt.strip()

    def _analyze_narrative_flow(self, script_data: Dict[str, Any]) -> str:
        """Analisa o fluxo narrativo para determinar tipo de anima√ß√£o"""
        script = script_data.get("roteiro_completo", "").lower()
        
        if any(word in script for word in ["revela√ß√£o", "descoberta", "surpreendente", "incr√≠vel", "revelar"]):
            return "revelation"
        elif any(word in script for word in ["batalha", "guerra", "conflito", "luta", "a√ß√£o"]):
            return "action"
        elif any(word in script for word in ["mist√©rio", "enigma", "segredo", "oculto", "misterioso"]):
            return "mystery"
        elif any(word in script for word in ["transforma√ß√£o", "evolu√ß√£o", "mudan√ßa", "desenvolvimento"]):
            return "transformation"
        else:
            return "exploration"

    def _optimize_prompt_length(self, prompt: str, max_length: int) -> str:
        """Otimiza o comprimento do prompt mantendo qualidade"""
        if len(prompt) <= max_length:
            return prompt
        
        # Remover se√ß√µes menos cr√≠ticas se necess√°rio
        sections = prompt.split('\n\n')
        optimized_sections = []
        current_length = 0
        
        # Priorizar se√ß√µes por import√¢ncia
        priority_order = ["ARTISTIC", "TECHNICAL", "COMPOSITION", "QUALITY", "PHOTOGRAPHY", "MOVEMENT"]
        
        for section in sections:
            if current_length + len(section) <= max_length:
                optimized_sections.append(section)
                current_length += len(section)
            else:
                # Tentar encurtar a se√ß√£o
                if any(priority in section for priority in priority_order[:3]):
                    # Manter se√ß√µes importantes mas encurtadas
                    shortened = section[:max_length - current_length - 10] + "..."
                    optimized_sections.append(shortened)
                    break
        
        return '\n\n'.join(optimized_sections)

    def get_platform_capabilities(self) -> Dict[str, Dict[str, Any]]:
        """Retorna informa√ß√µes sobre as capacidades de cada plataforma"""
        return {
            "image_platforms": self.ai_platform_configs,
            "video_platforms": self.video_animation_configs
        }

    def get_available_styles(self) -> List[Dict[str, str]]:
        """Retorna estilos visuais dispon√≠veis"""
        return [
            {
                "id": key,
                "name": style.name,
                "description": style.description
            }
            for key, style in self.visual_styles.items()
        ]

    def optimize_prompts_for_youtube_shorts(self, theme: str, script_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera todos os prompts otimizados especificamente para YouTube Shorts"""
        try:
            # Gerar prompts de imagem ultra-detalhados
            image_prompts = self.generate_ultra_detailed_image_prompts(theme, script_data)
            
            # Gerar prompts de anima√ß√£o baseados no script
            animation_prompts = self.generate_video_animation_prompts(theme, script_data, image_prompts)
            
            # Informa√ß√µes adicionais
            category = self._detect_content_category(theme, script_data)
            visual_elements = self._extract_visual_keywords(script_data, theme)
            
            return {
                "theme": theme,
                "category": category,
                "visual_elements": visual_elements,
                "image_prompts": image_prompts,
                "animation_prompts": animation_prompts,
                "optimization_tips": self._generate_youtube_shorts_tips(category),
                "technical_specs": {
                    "aspect_ratio": "9:16",
                    "target_duration": "15-60 seconds",
                    "quality": "Mobile-optimized, high engagement potential"
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao otimizar prompts para YouTube Shorts: {e}")
            return {}

    def _generate_youtube_shorts_tips(self, category: str) -> List[str]:
        """Gera dicas espec√≠ficas de otimiza√ß√£o para YouTube Shorts"""
        base_tips = [
            "Use cores vibrantes e contrastantes para chamar aten√ß√£o",
            "Mantenha elementos importantes no centro da composi√ß√£o vertical",
            "Garanta que o texto seja leg√≠vel em telas pequenas",
            "Use movimento para manter engajamento visual constante"
        ]
        
        category_tips = {
            "historia": [
                "Use paleta de cores √©pica e cinematogr√°fica",
                "Inclua elementos arquitet√¥nicos reconhec√≠veis da √©poca",
                "Mantenha autenticidade hist√≥rica com drama visual"
            ],
            "ciencia": [
                "Use visualiza√ß√µes claras e educativas", 
                "Mantenha paleta de cores limpa e profissional",
                "Inclua elementos gr√°ficos que facilitem compreens√£o"
            ],
            "misterio": [
                "Use contraste dram√°tico entre luz e sombra",
                "Inclua elementos que criem tens√£o visual",
                "Mantenha atmosfera envolvente e suspenseful"
            ],
            "tecnologia": [
                "Use cores neon e elementos futuristas",
                "Inclua interfaces e elementos digitais reconhec√≠veis",
                "Mantenha est√©tica moderna e clean"
            ],
            "motivacional": [
                "Use cores inspiradoras e energ√©ticas",
                "Inclua elementos que transmitam sucesso e conquista",
                "Mantenha composi√ß√£o ascendente e positiva"
            ],
            "curiosidade": [
                "Use elementos visuais intrigantes e educativos",
                "Mantenha clareza visual para f√°cil compreens√£o",
                "Inclua detalhes que despertem curiosidade"
            ]
        }
        
        return base_tips + category_tips.get(category, [])

    def generate_textarea_prompts(self, theme: str, target_duration_seconds: int, script_data: Optional[Dict[str, Any]] = None) -> Dict[str, str]:
        """Gera prompts formatados para textarea baseado na dura√ß√£o do v√≠deo e configura√ß√£o de 3 segundos por imagem"""
        try:
            # Calcular n√∫mero de prompts necess√°rios
            num_prompts = self.calculate_number_of_prompts(target_duration_seconds)
            
            # Detectar categoria se script dispon√≠vel
            category = "curiosidade"
            visual_elements = []
            if script_data:
                category = self._detect_content_category(theme, script_data)
                visual_elements = self._extract_visual_keywords(script_data, theme)
            
            # Gerar prompts base
            image_prompts = self.generate_ultra_detailed_image_prompts(theme, script_data or {})
            animation_prompts = self.generate_video_animation_prompts(theme, script_data or {})
            
            # Formatar para textarea - IMAGENS
            image_textarea = self._format_image_prompts_for_textarea(
                theme, num_prompts, image_prompts, category, visual_elements
            )
            
            # Formatar para textarea - ANIMA√á√ïES
            animation_textarea = self._format_animation_prompts_for_textarea(
                theme, num_prompts, animation_prompts, category
            )
            
            logger.info(f"‚úÖ Textarea prompts gerados: {num_prompts} prompts para {target_duration_seconds}s de v√≠deo")
            
            return {
                "image_prompts": image_textarea,
                "animation_prompts": animation_textarea,
                "video_info": {
                    "target_duration": target_duration_seconds,
                    "num_prompts": num_prompts,
                    "seconds_per_image": self.SECONDS_PER_IMAGE,
                    "category": category
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar prompts para textarea: {e}")
            return {
                "image_prompts": f"Erro ao gerar prompts de imagem: {e}",
                "animation_prompts": f"Erro ao gerar prompts de anima√ß√£o: {e}",
                "video_info": {}
            }

    def _format_image_prompts_for_textarea(self, theme: str, num_prompts: int, 
                                         image_prompts: Dict[str, str], category: str, 
                                         visual_elements: List[str]) -> str:
        """Formata prompts de imagem para exibi√ß√£o em textarea"""
        lines = []
        lines.append(f"üéØ TEMA: {theme}")
        lines.append(f"üìä {num_prompts} IMAGENS √ó {self.SECONDS_PER_IMAGE}s = {num_prompts * self.SECONDS_PER_IMAGE}s total")
        lines.append(f"üìÅ CATEGORIA: {category.upper()}")
        lines.append("")
        
        # Para cada plataforma
        for platform, prompt in image_prompts.items():
            platform_name = self.ai_platform_configs.get(platform, {}).get("name", platform.upper())
            lines.append(f"üñºÔ∏è ‚ïê‚ïê‚ïê {platform_name} ‚ïê‚ïê‚ïê")
            lines.append("")
            
            # Gerar prompts numerados para cada imagem necess√°ria
            for i in range(num_prompts):
                scene_time_start = i * self.SECONDS_PER_IMAGE
                scene_time_end = (i + 1) * self.SECONDS_PER_IMAGE
                
                # Personalizar cada prompt com elementos √∫nicos
                customized_prompt = self._customize_prompt_for_scene(
                    prompt, i, num_prompts, visual_elements, theme
                )
                
                lines.append(f"‚è±Ô∏è CENA {i+1}: {scene_time_start}s-{scene_time_end}s")
                lines.append(f"üì∏ {customized_prompt}")
                lines.append("")
            
            lines.append("‚îÄ" * 50)
            lines.append("")
        
        return "\n".join(lines)

    def _format_animation_prompts_for_textarea(self, theme: str, num_prompts: int, 
                                             animation_prompts: Dict[str, str], category: str) -> str:
        """Formata prompts de anima√ß√£o para exibi√ß√£o em textarea"""
        lines = []
        lines.append(f"üé¨ ANIMA√á√ÉO: {theme}")
        lines.append(f"üìä {num_prompts} CENAS √ó {self.SECONDS_PER_IMAGE}s = {num_prompts * self.SECONDS_PER_IMAGE}s total")
        lines.append(f"üìÅ CATEGORIA: {category.upper()}")
        lines.append("")
        
        # Para cada plataforma de v√≠deo
        for platform, prompt in animation_prompts.items():
            platform_name = self.video_animation_configs.get(platform, {}).get("name", platform.upper())
            lines.append(f"üé• ‚ïê‚ïê‚ïê {platform_name} ‚ïê‚ïê‚ïê")
            lines.append("")
            
            # Gerar anima√ß√µes numeradas para cada cena
            for i in range(num_prompts):
                scene_time_start = i * self.SECONDS_PER_IMAGE
                scene_time_end = (i + 1) * self.SECONDS_PER_IMAGE
                
                # Personalizar anima√ß√£o para a cena
                animation_style = self._get_animation_style_for_scene(platform, i, num_prompts)
                
                lines.append(f"‚è±Ô∏è CENA {i+1}: {scene_time_start}s-{scene_time_end}s")
                lines.append(f"üé¨ {animation_style}")
                lines.append(f"üí´ DURA√á√ÉO: {self.SECONDS_PER_IMAGE} segundos")
                lines.append("")
            
            lines.append("‚îÄ" * 50)
            lines.append("")
        
        return "\n".join(lines)

    def _customize_prompt_for_scene(self, base_prompt: str, scene_index: int, 
                                  total_scenes: int, visual_elements: List[str], theme: str) -> str:
        """Customiza prompt base para cada cena espec√≠fica"""
        try:
            # Varia√ß√µes por posi√ß√£o na narrativa
            narrative_position = "opening" if scene_index == 0 else "middle" if scene_index < total_scenes - 1 else "closing"
            
            # Varia√ß√µes de enquadramento
            framing_options = [
                "wide establishing shot", "medium shot", "close-up detail", 
                "dramatic angle", "overhead view", "side perspective"
            ]
            framing = framing_options[scene_index % len(framing_options)]
            
            # Elementos visuais √∫nicos por cena
            if visual_elements and len(visual_elements) > scene_index:
                focus_element = visual_elements[scene_index % len(visual_elements)]
                element_detail = f", focusing on {focus_element}"
            else:
                element_detail = ""
            
            # Varia√ß√µes de mood por posi√ß√£o
            mood_variations = {
                "opening": "intriguing introduction, hook visual",
                "middle": "developing narrative, building tension", 
                "closing": "powerful conclusion, memorable finale"
            }
            mood = mood_variations.get(narrative_position, "engaging visual storytelling")
            
            # Personalizar o prompt
            customized = f"{base_prompt}{element_detail}, {framing}, {mood}"
            
            return customized
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao customizar prompt para cena {scene_index}: {e}")
            return base_prompt

    def _get_animation_style_for_scene(self, platform: str, scene_index: int, total_scenes: int) -> str:
        """Retorna estilo de anima√ß√£o espec√≠fico para a cena"""
        try:
            config = self.video_animation_configs.get(platform, self.video_animation_configs["leonardo"])
            animation_styles = config["animation_styles"]
            
            # Selecionar estilo baseado na posi√ß√£o na narrativa
            if scene_index == 0:
                # Cena de abertura - movimento de introdu√ß√£o
                style_options = ["slow cinematic zoom in", "dramatic reveal", "epic opening pan"]
            elif scene_index == total_scenes - 1:
                # Cena final - movimento de conclus√£o  
                style_options = ["powerful finale zoom", "concluding pan out", "memorable closing movement"]
            else:
                # Cenas intermedi√°rias - movimento de desenvolvimento
                style_options = animation_styles[1:-1] if len(animation_styles) > 2 else animation_styles
            
            selected_style = style_options[scene_index % len(style_options)]
            
            # Adicionar especifica√ß√µes t√©cnicas
            technical_specs = config["technical_specs"]
            duration_note = f"{self.SECONDS_PER_IMAGE} seconds duration"
            
            return f"{selected_style}, {technical_specs}, {duration_note}, vertical 9:16 format"
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estilo de anima√ß√£o para cena {scene_index}: {e}")
            return f"smooth cinematic movement, {self.SECONDS_PER_IMAGE} seconds, vertical format"
