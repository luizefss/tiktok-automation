#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste do Pipeline C    # Verificar se existem imagens de teste
    test_images_dir = "../media/test_images"
    if not os.path.exists(test_images_dir):
        print(f"‚ùå Diret√≥rio {test_images_dir} n√£o encontrado")eto Leonardo Motion + ElevenLabs TTS
========================================================

Este script testa a integra√ß√£o completa:
1. Storyboard JSON
2. Gera√ß√£o de imagens (simulado com imagens existentes)
3. Leonardo Motion (anima√ß√£o)
4. ElevenLabs TTS (narra√ß√£o)
5. MoviePy (montagem final)
"""

import os
import json
import sys
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

# Imports do pipeline
try:
    from leonardo_motion_client import leonardo_animate_image
    from services.elevenlabs_tts import ElevenLabsTTS
    # MoviePy v2.x nova sintaxe de importa√ß√£o
    from moviepy import VideoFileClip, AudioFileClip, CompositeVideoClip
    PIPELINE_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Erro ao importar pipeline: {e}")
    PIPELINE_AVAILABLE = False

def create_test_storyboard():
    """Cria um storyboard de teste simples"""
    storyboard = {
        "title": "Teste do Pipeline Leonardo + ElevenLabs",
        "description": "Teste de integra√ß√£o completa",
        "scenes": [
            {
                "scene_number": 1,
                "t_start": 0,
                "t_end": 4,
                "image_prompt": "A beautiful sunset over the mountains, golden hour lighting, cinematic composition",
                "narration": "O sol se p√µe majestosamente sobre as montanhas, pintando o c√©u com cores douradas.",
                "motion_prompt": "slow cinematic zoom in, golden particles floating"
            },
            {
                "scene_number": 2,
                "t_start": 4,
                "t_end": 8,
                "image_prompt": "A peaceful lake reflecting the sunset colors, mirror-like water surface",
                "narration": "As √°guas calmas do lago refletem perfeitamente as cores do entardecer.",
                "motion_prompt": "gentle water ripples, subtle camera pan right"
            },
            {
                "scene_number": 3,
                "t_start": 8,
                "t_end": 12,
                "image_prompt": "Mountains silhouette against colorful sky, dramatic lighting",
                "narration": "As silhuetas das montanhas se destacam contra o c√©u colorido.",
                "motion_prompt": "slow vertical pan up, atmospheric haze movement"
            }
        ]
    }
    return storyboard

def test_leonardo_motion():
    """Testa apenas o cliente Leonardo Motion"""
    print("\n=== TESTE LEONARDO MOTION ===")
    
    # Verificar se h√° imagens de teste
    test_images_dir = "../media/test_images"
    if not os.path.exists(test_images_dir):
        print(f"‚ùå Diret√≥rio {test_images_dir} n√£o encontrado")
        return False
    
    # Procurar primeira imagem dispon√≠vel
    test_image = None
    for ext in ['png', 'jpg', 'jpeg', 'webp']:
        for img_file in os.listdir(test_images_dir):
            if img_file.lower().endswith(f'.{ext}'):
                test_image = os.path.join(test_images_dir, img_file)
                break
        if test_image:
            break
    
    if not test_image:
        print(f"‚ùå Nenhuma imagem encontrada em {test_images_dir}")
        return False
    
    print(f"üñºÔ∏è Usando imagem de teste: {test_image}")
    
    # Ler chave da API
    leonardo_key = os.getenv('LEONARDO_API_KEY')
    if not leonardo_key:
        print("‚ùå LEONARDO_API_KEY n√£o encontrada no .env")
        return False
    
    try:
        output_video = "./test_motion_output.mp4"
        print(f"üé¨ Gerando motion para: {output_video}")
        
        result = leonardo_animate_image(
            image_path=test_image,
            out_path=output_video,
            api_key=leonardo_key,
            motion_strength=8,
            prompt="slow cinematic zoom in, atmospheric particles"
        )
        
        print(f"‚úÖ Motion gerado: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no Leonardo Motion: {e}")
        return False

def test_complete_pipeline():
    """Testa o pipeline completo"""
    print("\n=== TESTE PIPELINE COMPLETO ===")
    
    # Por enquanto, apenas simulando - implementa√ß√£o completa depois
    print("ÔøΩ Pipeline completo ainda em desenvolvimento")
    print("‚úÖ Teste do Leonardo Motion + ElevenLabs ser√° implementado na pr√≥xima vers√£o")
    return True

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DO PIPELINE LEONARDO MOTION + ELEVENLABS")
    print("=" * 60)
    
    # Carregar vari√°veis de ambiente
    from dotenv import load_dotenv
    load_dotenv()
    
    # Verificar depend√™ncias
    print("\n=== VERIFICA√á√ÉO DE DEPEND√äNCIAS ===")
    
    try:
        import moviepy
        print(f"‚úÖ MoviePy: {moviepy.__version__}")
    except ImportError:
        print("‚ùå MoviePy n√£o instalado")
        return 1
    
    try:
        import requests
        print("‚úÖ Requests dispon√≠vel")
    except ImportError:
        print("‚ùå Requests n√£o instalado")
        return 1
    
    leonardo_key = os.getenv('LEONARDO_API_KEY')
    elevenlabs_key = os.getenv('ELEVEN_API_KEY')
    
    print(f"üîë Leonardo API: {'‚úÖ' if leonardo_key else '‚ùå'}")
    print(f"üîë ElevenLabs API: {'‚úÖ' if elevenlabs_key else '‚ùå'}")
    
    # Executar testes
    success = True
    
    # Teste 1: Leonardo Motion apenas
    if leonardo_key:
        success &= test_leonardo_motion()
    else:
        print("‚è≠Ô∏è Pulando teste Leonardo Motion (sem API key)")
    
    # Teste 2: Pipeline completo
    if leonardo_key and elevenlabs_key and PIPELINE_AVAILABLE:
        success &= test_complete_pipeline()
    else:
        print("‚è≠Ô∏è Pulando teste pipeline completo (falta API keys ou depend√™ncias)")
    
    # Resultado final
    print("\n" + "=" * 60)
    if success:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\nüí° Pr√≥ximos passos:")
        print("   1. Testar com imagens reais geradas pelo sistema")
        print("   2. Ajustar configura√ß√µes de motion_strength")
        print("   3. Testar diferentes vozes ElevenLabs")
        print("   4. Integrar com o frontend")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("\nüîß Para resolver:")
        print("   1. Verificar chaves de API no .env")
        print("   2. Instalar depend√™ncias: pip install moviepy requests")
        print("   3. Verificar conectividade com APIs")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
