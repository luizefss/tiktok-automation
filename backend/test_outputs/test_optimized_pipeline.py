# /var/www/tiktok-automation/backend/test_optimized_pipeline.py

"""
Teste do Pipeline Otimizado
Roteiro ‚Üí √Åudio ‚Üí Imagem ‚Üí V√≠deo
"""

import asyncio
from content_pipeline_optimized import (
    ContentPipelineOptimized,
    ContentRequest,
    create_content_optimized
)

async def test_step_by_step():
    """Testa cada etapa do pipeline separadamente"""
    print("üîç Testando Pipeline Passo a Passo...")
    
    script = """
    Transforma√ß√£o completa de um banheiro pequeno! Removemos o box antigo,
    instalamos um chuveiro moderno com ducha, colocamos revestimento novo
    e criamos um nicho funcional. O resultado ficou incr√≠vel e muito mais pr√°tico!
    """
    
    pipeline = ContentPipelineOptimized()
    
    # 1. An√°lise do Roteiro
    print("\nüìù Etapa 1: An√°lise do Roteiro")
    analysis = pipeline._analyze_script(script)
    print(f"  ‚úÖ Palavras: {analysis['word_count']}")
    print(f"  ‚úÖ Dura√ß√£o: {analysis['duration_estimate']:.1f}min")
    print(f"  ‚úÖ T√≥pico: {analysis['main_topic']}")
    print(f"  ‚úÖ Tom: {analysis['tone']}")
    print(f"  ‚úÖ Emo√ß√µes: {', '.join(analysis['emotions'])}")
    print(f"  ‚úÖ Elementos visuais: {', '.join(analysis['visual_keywords'][:5])}")
    print(f"  ‚úÖ Segmentos para imagens: {len(analysis['image_segments'])}")
    
    # 2. Gera√ß√£o de √Åudio
    print("\nüéµ Etapa 2: Gera√ß√£o de √Åudio")
    request = ContentRequest(
        script=script,
        title="Teste de Banheiro",
        voice_style="enthusiastic"
    )
    
    audio_file = await pipeline._generate_audio(request, analysis)
    if audio_file:
        print(f"  ‚úÖ √Åudio gerado: {audio_file}")
        import os
        if os.path.exists(audio_file):
            size = os.path.getsize(audio_file)
            print(f"  ‚úÖ Tamanho do arquivo: {size} bytes")
    else:
        print("  ‚ùå Falha na gera√ß√£o de √°udio")
        return False
    
    # 3. Gera√ß√£o de Imagens
    print("\nüé® Etapa 3: Gera√ß√£o de Imagens")
    image_files = await pipeline._generate_images(request, analysis)
    if image_files:
        print(f"  ‚úÖ {len(image_files)} imagens geradas:")
        for i, img in enumerate(image_files):
            print(f"    {i+1}. {img}")
    else:
        print("  ‚ùå Falha na gera√ß√£o de imagens")
    
    # 4. Cria√ß√£o de V√≠deos
    print("\nüé¨ Etapa 4: Cria√ß√£o de V√≠deos")
    video_files = await pipeline._create_videos(request, audio_file, image_files, analysis)
    if video_files:
        print(f"  ‚úÖ {len(video_files)} v√≠deos criados:")
        for platform, video in video_files.items():
            print(f"    {platform}: {video}")
    else:
        print("  ‚ùå Falha na cria√ß√£o de v√≠deos")
    
    return True

async def test_complete_pipeline():
    """Testa o pipeline completo"""
    print("\nüöÄ Testando Pipeline Completo...")
    
    script = """
    Reforma completa de uma sala de estar! O cliente queria um ambiente moderno
    e aconchegante para receber a fam√≠lia. Demolimos uma parede, criamos um conceito
    aberto integrado com a cozinha, instalamos uma TV de 65 polegadas na parede
    e escolhemos m√≥veis que combinam funcionalidade com design. O resultado superou
    todas as expectativas e criou o ambiente perfeito para momentos em fam√≠lia!
    """
    
    result = await create_content_optimized(
        script=script,
        title="Reforma Completa de Sala de Estar",
        description="Transforma√ß√£o total com conceito aberto e design moderno",
        voice_style="enthusiastic",
        image_style="realistic",
        num_images=4,
        video_style="modern",
        platforms=["tiktok", "instagram_reels", "youtube_shorts"]
    )
    
    if result.success:
        print("‚úÖ Pipeline executado com sucesso!")
        print(f"‚è±Ô∏è Tempo total: {result.processing_time:.2f}s")
        
        # Detalhes da an√°lise
        if result.script_analysis:
            analysis = result.script_analysis
            print(f"\nüìä An√°lise do Roteiro:")
            print(f"  - T√≥pico: {analysis.get('main_topic', 'N/A')}")
            print(f"  - Tom: {analysis.get('tone', 'N/A')}")
            print(f"  - Emo√ß√µes: {', '.join(analysis.get('emotions', []))}")
            print(f"  - Dura√ß√£o: {analysis.get('duration_estimate', 0):.1f}min")
            print(f"  - Palavras-chave: {', '.join(analysis.get('visual_keywords', [])[:5])}")
        
        # Detalhes do √°udio
        print(f"\nüéµ √Åudio:")
        print(f"  - Arquivo: {result.audio_file}")
        import os
        if os.path.exists(result.audio_file):
            size = os.path.getsize(result.audio_file)
            print(f"  - Tamanho: {size:,} bytes")
        
        # Detalhes das imagens
        print(f"\nüñºÔ∏è Imagens: {len(result.image_files)} geradas")
        for i, img in enumerate(result.image_files):
            if os.path.exists(img):
                size = os.path.getsize(img)
                print(f"  {i+1}. {img} ({size:,} bytes)")
        
        # Detalhes dos v√≠deos
        print(f"\nüé¨ V√≠deos: {len(result.video_files)} criados")
        for platform, video in result.video_files.items():
            print(f"  {platform}: {video}")
            
            # Verifica metadados
            metadata_file = video.replace('.mp4', '.json')
            if os.path.exists(metadata_file):
                import json
                with open(metadata_file, 'r') as f:
                    metadata = json.load(f)
                config = metadata.get('config', {})
                print(f"    - Resolu√ß√£o: {config.get('resolution', 'N/A')}")
                print(f"    - FPS: {config.get('fps', 'N/A')}")
                print(f"    - Dura√ß√£o m√°x: {config.get('duration_max', 'N/A')}s")
        
        return True
    else:
        print(f"‚ùå Pipeline falhou: {result.error_message}")
        return False

async def test_different_styles():
    """Testa diferentes estilos"""
    print("\nüé® Testando Diferentes Estilos...")
    
    base_script = "Reforma moderna de quarto com closet planejado e ilumina√ß√£o LED."
    
    test_cases = [
        {
            "name": "Profissional",
            "voice_style": "professional",
            "image_style": "professional",
            "video_style": "corporate"
        },
        {
            "name": "Enthusi√°stico",
            "voice_style": "enthusiastic", 
            "image_style": "vibrant",
            "video_style": "dynamic"
        },
        {
            "name": "Educacional",
            "voice_style": "educational",
            "image_style": "clean",
            "video_style": "tutorial"
        }
    ]
    
    results = []
    
    for test_case in test_cases:
        print(f"\n  Testando estilo: {test_case['name']}")
        
        result = await create_content_optimized(
            script=base_script,
            title=f"Teste {test_case['name']}",
            voice_style=test_case['voice_style'],
            image_style=test_case['image_style'],
            video_style=test_case['video_style'],
            num_images=2,
            platforms=["tiktok"]
        )
        
        results.append({
            "style": test_case['name'],
            "success": result.success,
            "time": result.processing_time,
            "error": result.error_message
        })
        
        status = "‚úÖ" if result.success else "‚ùå"
        print(f"  {status} {test_case['name']}: {result.processing_time:.2f}s")
    
    # Resumo
    successful = sum(1 for r in results if r['success'])
    print(f"\nüìä Resumo: {successful}/{len(results)} estilos funcionaram")
    
    return successful == len(results)

async def test_performance():
    """Testa performance do pipeline"""
    print("\n‚ö° Testando Performance...")
    
    short_script = "Dica r√°pida: use espelhos para ampliar espa√ßos pequenos!"
    medium_script = """
    Transforma√ß√£o de escrit√≥rio home office! Criamos um espa√ßo produtivo
    com mesa planejada, ilumina√ß√£o adequada e organiza√ß√£o inteligente.
    """
    long_script = """
    Reforma completa de uma casa de 150m¬≤! Come√ßamos com um projeto arquitet√¥nico
    moderno, demolimos paredes internas para criar conceito aberto, instalamos
    piso porcelanato em toda √°rea social, criamos uma cozinha gourmet integrada
    com ilha central, reformamos tr√™s banheiros com acabamentos de primeira linha,
    e transformamos o quintal em uma √°rea de lazer com piscina e churrasqueira.
    O resultado foi uma casa completamente transformada e valorizada!
    """
    
    test_scripts = [
        ("Curto (10 palavras)", short_script),
        ("M√©dio (30 palavras)", medium_script),
        ("Longo (80 palavras)", long_script)
    ]
    
    performance_results = []
    
    for name, script in test_scripts:
        print(f"\n  Testando: {name}")
        
        result = await create_content_optimized(
            script=script,
            title=f"Teste Performance {name}",
            num_images=2,
            platforms=["tiktok"]
        )
        
        performance_results.append({
            "name": name,
            "word_count": len(script.split()),
            "success": result.success,
            "time": result.processing_time,
            "images": len(result.image_files),
            "videos": len(result.video_files)
        })
        
        print(f"    ‚è±Ô∏è Tempo: {result.processing_time:.2f}s")
        print(f"    üìä Status: {'‚úÖ' if result.success else '‚ùå'}")
    
    # An√°lise de performance
    print(f"\nüìà An√°lise de Performance:")
    for perf in performance_results:
        if perf['success']:
            words_per_second = perf['word_count'] / perf['time']
            print(f"  {perf['name']}: {words_per_second:.1f} palavras/segundo")
    
    return all(r['success'] for r in performance_results)

async def test_error_handling():
    """Testa tratamento de erros"""
    print("\nüõ°Ô∏è Testando Tratamento de Erros...")
    
    error_tests = [
        ("Script vazio", ""),
        ("Script muito curto", "Oi."),
        ("Caracteres especiais", "Script com √©mojis üè†üî® e s√≠mbolos @#$%"),
    ]
    
    error_results = []
    
    for name, script in error_tests:
        print(f"\n  Testando: {name}")
        
        result = await create_content_optimized(
            script=script,
            title=f"Teste Erro {name}",
            num_images=1,
            platforms=["tiktok"]
        )
        
        error_results.append({
            "test": name,
            "handled_gracefully": not result.success or result.error_message != ""
        })
        
        if not result.success:
            print(f"    ‚úÖ Erro tratado: {result.error_message}")
        else:
            print(f"    ‚ö†Ô∏è Processou inesperadamente")
    
    return True  # Sempre passa, pois testamos o tratamento

async def main():
    """Executa todos os testes"""
    print("üß™ TESTANDO PIPELINE OTIMIZADO")
    print("Sequ√™ncia: Roteiro ‚Üí √Åudio ‚Üí Imagem ‚Üí V√≠deo")
    print("=" * 60)
    
    tests = [
        ("Pipeline Passo a Passo", test_step_by_step),
        ("Pipeline Completo", test_complete_pipeline),
        ("Diferentes Estilos", test_different_styles),
        ("Performance", test_performance),
        ("Tratamento de Erros", test_error_handling)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        
        try:
            result = await test_func()
            results[test_name] = result
            
            if result:
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
                
        except Exception as e:
            print(f"üí• {test_name}: ERRO - {e}")
            results[test_name] = False
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES - PIPELINE OTIMIZADO")
    print("=" * 60)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    print("\nüîÑ FLUXO CONFIRMADO:")
    print("1. üìù Roteiro ‚Üí An√°lise inteligente do conte√∫do")
    print("2. üéµ √Åudio ‚Üí TTS com voz adaptada ao contexto")
    print("3. üñºÔ∏è Imagem ‚Üí Gera√ß√£o baseada no roteiro")
    print("4. üé¨ V√≠deo ‚Üí Composi√ß√£o final por plataforma")
    print("\nüí° Publica√ß√£o ser√° configurada posteriormente")
    
    # Estat√≠sticas do pipeline
    try:
        from content_pipeline_optimized import optimized_pipeline
        stats = optimized_pipeline.get_stats()
        if "error" not in stats:
            print(f"\nüìà Estat√≠sticas do Pipeline:")
            print(f"  - Total de conte√∫dos: {stats['total_content']}")
            print(f"  - Taxa de sucesso: {stats['success_rate']:.1f}%")
            print(f"  - Tempo m√©dio: {stats['avg_processing_time']:.2f}s")
    except:
        pass
    
    return passed / total

if __name__ == "__main__":
    success_rate = asyncio.run(main())
    exit_code = 0 if success_rate >= 0.8 else 1
    exit(exit_code)
